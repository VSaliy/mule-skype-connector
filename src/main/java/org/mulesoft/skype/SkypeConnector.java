/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mulesoft.skype;

import com.skype.*;
import org.mule.api.annotations.*;
import org.mule.api.callback.SourceCallback;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Module(name = "skype", schemaVersion = "1.0-SNAPSHOT")
public class SkypeConnector {

    private Logger logger = Logger.getLogger(SkypeConnector.class.getName());

    /**
     * Starts listening for skype chat messages
     * <p/>
     * {@sample.xml ../../../doc/Skype-connector.xml.sample skype:listenForChatMessages}
     *
     * @param callback The callback of mule
     * @throws SkypeException
     */
    @Source(threadingModel = SourceThreadingModel.SINGLE_THREAD)
    public void listenForChatMessages(final SourceCallback callback) throws SkypeException {

        Skype.addChatMessageListener(new ChatMessageListener() {
            public void chatMessageReceived(ChatMessage receivedChatMessage) throws SkypeException {
                try {
                    if (receivedChatMessage.getType().equals(ChatMessage.Type.SAID)) {

                        callback.process(new SkypeChatMessage(receivedChatMessage.getSenderId(), receivedChatMessage.getContent()));
                    }
                } catch (Exception e) {
                    logger.log(Level.SEVERE, "Error on message received", e);
                }
            }

            public void chatMessageSent(ChatMessage sentChatMessage) throws SkypeException {

            }
        });
    }

    /**
     * Starts listening for messages on a specifc chat
     * {@sample.xml ../../../doc/Skype-connector.xml.sample skype:listenForChatMessagesOn}
     *
     * @param userID   The chat user id
     * @param callback The callback of mule
     * @throws SkypeException
     */
    @Source(threadingModel = SourceThreadingModel.SINGLE_THREAD)
    public void listenForChatMessagesOn(final String userID, final SourceCallback callback) throws SkypeException {
        Skype.addChatMessageListener(new ChatMessageListener() {
            public void chatMessageReceived(ChatMessage receivedChatMessage) throws SkypeException {
                try {
                    String senderId = receivedChatMessage.getSenderId();
                    if (receivedChatMessage.getType().equals(ChatMessage.Type.SAID) && senderId.equalsIgnoreCase(userID)) {
                        callback.process(new SkypeChatMessage(senderId, receivedChatMessage.getContent()));
                    }
                } catch (Exception e) {
                    logger.log(Level.SEVERE, "Error on message received", e);
                }
            }

            public void chatMessageSent(ChatMessage sentChatMessage) throws SkypeException {

            }
        });
    }


    /**
     * Custom processor
     * <p/>
     * {@sample.xml ../../../doc/Skype-connector.xml.sample skype:sendMessageTo}
     *
     * @param userId  Target Skype user id
     * @param message Content to be processed
     * @return Some string
     */
    @Processor
    public String sendMessageTo(String userId, String message) throws SkypeException {
        Skype.setDaemon(false);
        Chat chat = Skype.chat(userId);
        return chat.send(message).getId();

    }

    /**
     * Custom processor
     * <p/>
     * {@sample.xml ../../../doc/Skype-connector.xml.sample skype:sendMessage}
     *
     * @param message The message to be sent
     * @return Some string
     */
    @Processor
    public String sendMessage(SkypeChatMessage message) throws SkypeException {
        Skype.setDaemon(false);
        Chat chat = Skype.chat(message.getUserId());
        return chat.send(message.getMessage()).getId();

    }

    /**
     * Returns the list of contacts
     * {@sample.xml ../../../doc/Skype-connector.xml.sample skype:getContacts}
     *
     * @return The list of contacts
     * @throws SkypeException
     */
    @Processor
    public List<SkypeContact> getContacts() throws SkypeException {
        List<SkypeContact> result = new ArrayList<SkypeContact>();
        ContactList contactList = Skype.getContactList();
        Friend[] allFriends = contactList.getAllFriends();
        for (Friend allFriend : allFriends) {
            String id = allFriend.getId();
            User.Status status = allFriend.getStatus();
            result.add(new SkypeContact(id, SkypeContact.Status.valueOf(status.name())));
        }
        return result;
    }

    static {

    }
}
